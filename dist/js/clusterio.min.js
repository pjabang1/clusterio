function greet(t){return"Hello, "+t+"!"}!function(){var t=window.clusterio||{};window.clusterio=t;var s={euclidean:function(t,s){for(var e=0,i=0;i<t.length;i++)e+=Math.pow(s[i]-t[i],2);return Math.sqrt(e)},manhattan:function(t,s){for(var e=0,i=0;i<t.length;i++)e+=Math.abs(s[i]-t[i]);return e},max:function(t,s){for(var e=0,i=0;i<t.length;i++)e=Math.max(e,Math.abs(s[i]-t[i]));return e}},e=function(t){this.centroids=t||[]};e.prototype.randomCentroids=function(t,s){var e=t.slice(0);return e.sort(function(){return Math.round(Math.random())-.5}),e.slice(0,s)},e.prototype.classify=function(t,e){var i=1/0,r=0;e=e||"euclidean","string"==typeof e&&(e=s[e]);for(var n=0;n<this.centroids.length;n++){var h=e(t,this.centroids[n]);i>h&&(i=h,r=n)}return r},e.prototype.cluster=function(t,e,i,r,n){e=e||Math.max(2,Math.ceil(Math.sqrt(t.length/2))),i=i||"euclidean","string"==typeof i&&(i=s[i]),this.centroids=this.randomCentroids(t,e);for(var h=new Array(t.length),o=new Array(e),a=0,l=!0;l;){for(var u=0;u<t.length;u++)h[u]=this.classify(t[u],i);l=!1;for(var c=0;e>c;c++){for(var d=[],u=0;u<h.length;u++)h[u]===c&&d.push(t[u]);if(d.length){for(var y=this.centroids[c],f=new Array(y.length),k=0;k<y.length;k++){for(var v=0,u=0;u<d.length;u++)v+=d[u][k];f[k]=v/d.length,f[k]!==y[k]&&(l=!0)}this.centroids[c]=f,o[c]=d}}n&&a++%r===0&&n(o)}return o},e.prototype.toJSON=function(){return JSON.stringify(this.centroids)},e.prototype.fromJSON=function(t){return this.centroids=JSON.parse(t),this},t.KMeans=e,t.kmeans=function(t,s){return(new e).cluster(t,s)};var i=function(t,s,e){this.distance=t,this.linkage=s,this.threshold=void 0===e?1/0:e};i.prototype={cluster:function(t,s,e){this.clusters=[],this.dists=[],this.mins=[],this.index=[];for(var i=0;i<t.length;i++){var r={value:t[i],key:i,index:i,size:1};this.clusters[i]=r,this.index[i]=r,this.dists[i]=[],this.mins[i]=0}for(var i=0;i<this.clusters.length;i++)for(var n=0;i>=n;n++){var h=i===n?1/0:this.distance(this.clusters[i].value,this.clusters[n].value);this.dists[i][n]=h,this.dists[n][i]=h,h<this.dists[i][this.mins[i]]&&(this.mins[i]=n)}for(var o=this.mergeClosest(),i=0;o;)e&&i++%s===0&&e(this.clusters),o=this.mergeClosest();return this.clusters.forEach(function(t){delete t.key,delete t.index}),this.clusters},mergeClosest:function(){for(var t=0,s=1/0,e=0;e<this.clusters.length;e++){var i=this.clusters[e].key,r=this.dists[i][this.mins[i]];s>r&&(t=i,s=r)}if(s>=this.threshold)return!1;var n=this.index[t],h=this.index[this.mins[t]],o={left:n,right:h,key:n.key,size:n.size+h.size};this.clusters[n.index]=o,this.clusters.splice(h.index,1),this.index[n.key]=o;for(var e=0;e<this.clusters.length;e++){var r,a=this.clusters[e];n.key==a.key?r=1/0:"single"===this.linkage?(r=this.dists[n.key][a.key],this.dists[n.key][a.key]>this.dists[h.key][a.key]&&(r=this.dists[h.key][a.key])):"complete"===this.linkage?(r=this.dists[n.key][a.key],this.dists[n.key][a.key]<this.dists[h.key][a.key]&&(r=this.dists[h.key][a.key])):r="average"===this.linkage?(this.dists[n.key][a.key]*n.size+this.dists[h.key][a.key]*h.size)/(n.size+h.size):this.distance(a.value,n.value),this.dists[n.key][a.key]=this.dists[a.key][n.key]=r}for(var e=0;e<this.clusters.length;e++){var l=this.clusters[e].key;if(this.mins[l]===n.key||this.mins[l]===h.key){for(var s=l,u=0;u<this.clusters.length;u++){var c=this.clusters[u].key;this.dists[l][c]<this.dists[l][s]&&(s=c)}this.mins[l]=s}this.clusters[e].index=e}return delete n.key,delete h.key,delete n.index,delete h.index,!0}},t.hcluster=function(t,e,r,n,h,o){e=e||"euclidean",r=r||"average","string"==typeof e&&(e=s[e]);var a=new i(e,r,n).cluster(t,h,o);return void 0===n?a[0]:a}}(window);